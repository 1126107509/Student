<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="studentTracking.dao.IStudentDao">
    <sql id="baseSql">
        SELECT
            s.stuId,
            s.stuName,
            s.sex,
            s.nation,
            s.birthday,
            s.birthPlace,
            s.marry,
            s.telephone,
            s.email,
            s.idcard,
            s.university,
            s.major,
            s.photo,
            s.note,
            s.state,
            s.classId,
            s.deptId
    </sql>

    <!--z
        List<Student> getAllStuByTeacher(@Param("teacherId") long teacherId,
                                         @Param("stuName") String stuName),
                                         @Param("classState") long classState;-->
    <select id="getAllStuByTeacher" resultType="Student">
        <include refid="baseSql"></include>
        FROM
        student s
        WHERE
        s.classId IN (
        SELECT
        classId
        FROM
        class c
        WHERE
        c.teacherId = #{teacherId}
        AND c.state = #{classState}
        )
        AND s.stuName LIKE concat('%', #{stuName}, '%')
    </select>

    <!--z
        List<Student> getStuByTeacher(@Param("page") int page,
                                  @Param("limit") int limit,
                                  @Param("teacherId") long teacherId,
                                  @Param("stuName") String stuName),
                                  @Param("classState") long classState;-->
    <select id="getStuByTeacher" resultMap="StuScoEva">
        <include refid="baseSql"></include>,
        sc.stuId as sId,
        sc.courseId,
        sc.score,
        sch.evaluateId,
        sch.stuId as stId,
        sch.evaluatePerson,
        sch.evaluateScore,
        sch.evaluateContent
        FROM
        student s
        LEFT JOIN score sc ON sc.stuId = s.stuId
        LEFT JOIN schoolEvaluation sch ON s.stuId = sch.stuId
        WHERE
        s.classId IN (
        SELECT
        classId
        FROM
        class c
        WHERE
        c.teacherId = #{teacherId}
        AND c.state = #{classState}
        )
        AND s.stuName LIKE concat('%', #{stuName}, '%')
        LIMIT #{page},#{limit}
    </select>
    <resultMap id="StuScoEva" type="Student">
        <id column="stuId" property="stuId"></id>
        <result column="stuName" property="stuName"></result>
        <result column="sex" property="sex"></result>
        <result column="nation" property="nation"></result>
        <result column="birthday" property="birthday"></result>
        <result column="birthPlace" property="birthPlace"></result>
        <result column="marry" property="marry"></result>
        <result column="telephone" property="telephone"></result>
        <result column="email" property="email"></result>
        <result column="idCard" property="idCard"></result>
        <result column="university" property="university"></result>
        <result column="major" property="major"></result>
        <result column="photo" property="photo"></result>
        <result column="note" property="note"></result>
        <result column="state" property="state"></result>
        <result column="classId" property="classId"></result>
        <result column="deptId" property="deptId"></result>
        <result column="userId" property="userId"></result>
        <collection property="scoreList" javaType="list" ofType="Score">
            <result column="sId" property="stuId"></result>
            <result column="courseId" property="courseId"></result>
            <result column="score" property="score"></result>
        </collection>
        <collection property="schoolEvaluation" javaType="SchoolEvaluation" ofType="SchoolEvaluation">
            <id column="evaluateId" property="evaluateId"></id>
            <result column="stId" property="stuId"></result>
            <result column="evaluatePerson" property="evaluatePerson"></result>
            <result column="evaluateScore" property="evaluateScore"></result>
            <result column="evaluateContent" property="evaluateContent"></result>
        </collection>
    </resultMap>

    <!--z
        Student getStuByStuId(long stuId);-->
    <select id="getStuByStuId" resultMap="StuScoEva">
        <include refid="baseSql"></include>,
        sc.stuId as sId,
        sc.courseId,
        sc.score,
        sch.evaluateId,
        sch.stuId as stId,
        sch.evaluatePerson,
        sch.evaluateScore,
        sch.evaluateContent
        FROM
        student s
        LEFT JOIN score sc ON sc.stuId = s.stuId
        LEFT JOIN schoolEvaluation sch ON s.stuId = sch.stuId
        WHERE s.stuId = #{stuId}
    </select>

    <!--Student getStuInform(long peopleId)-->
    <!--根据peopleid查询个人学生信息-->
    <select id="getStuInform" resultType="Student">
        <include refid="baseSql"></include>
        FROM student s
        WHERE stuId = #{peopleId}
    </select>
    <!-- List<Student> getStu(long deptId)
    <根据deptId查询学生个人信息-->
    <!--林崑鹏-->
    <select id="getStu" resultType="Student">
        <include refid="baseSql"></include>
        from student s
        where s.deptId = #{deptId}
    </select>

    <!--List<Student> getStuByDeptId(@Param("page") int page, @Param("limit") int limit, @Param("deptId") long deptId)-->
    <!--根据部门id查询所有学生的姓名和毕业班级-->
    <!--林崑鹏-->
    <select id="getStuByDeptId" resultMap="stuList">
        SELECT
        s.stuId,
        s.stuName,
        s.deptId,
        s.sex,
        c.className
        FROM
        student s
        JOIN class c ON s.classId = c.classId
        WHERE
        s.deptId = #{deptId}
        <if test="stuName != null">
            AND s.stuName LIKE concat('%',#{stuName},'%')
        </if>
        LIMIT #{page}, #{limit}
    </select>
    <resultMap id="stuList" type="Student">
        <id column="stuId" property="stuId"></id>
        <result column="stuName" property="stuName"></result>
        <result column="classId" property="classId"></result>
        <result column="deptId" property="deptId"></result>
        <result column="sex" property="sex"></result>
        <collection property="aClass" javaType="Class">
            <result column="className" property="className"></result>
        </collection>
    </resultMap>
</mapper>